CREATE ASSEMBLY Split
FROM 
WITH PERMISSION_SET = SAFE;
GO
CREATE FUNCTION dbo.SplitterB
(
    @Input nvarchar(max),
    @Delimiter nchar(1)
)
RETURNS  TABLE
(
	sequence int NULL,
	item nvarchar(4000) NULL
)
AS 
EXTERNAL NAME Split.UserDefinedFunctions.SplitterB;
GO

/*
using System.Collections;
using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;

public partial class UserDefinedFunctions
{
    /**
     * How SQL Server SQLCLR table-valued functions work:
     * 
     * 1. SQL Server passes the input parameters in to the function and receives an enumeration object in return
     * 2. SQL Server calls the MoveNext() method on the enumeration object
     * 3. If the MoveNext() call returns true, SQL Server calls the Current() method to get an object for the current row
     * 4. SQL Server calls the FillRow method to obtain column values for the current row
     * 5. Repeat from step 2, until MoveNext() returns false
     * 
     * */

    [SqlFunction
        (
        DataAccess = DataAccessKind.None,               // No user data access by this function
        SystemDataAccess = SystemDataAccessKind.None,   // No system data access by this function
        IsDeterministic = true,                         // This function is deterministic
        IsPrecise = true,                               // This function is precise
        FillRowMethodName = "FillRow",                  // The method called by SQL Server to obtain the next row
        TableDefinition =
            "sequence INT, item NVARCHAR(4000)"         // Returned table definition
        )
    ]
    // 1. SQL Server passes input parameters and receives an enumration object
    public static IEnumerator SplitterB
        (
        [SqlFacet(MaxSize = -1)] SqlChars Input,
        char Delimiter
        )
    {
        return Input.IsNull ?
            new SplitEnumerator(new char[0], char.MinValue) :
            new SplitEnumerator(Input.Value, Delimiter);
    }

    // The enumeration object
    struct SplitEnumerator : IEnumerator
    {
        // Constructor (called once when the object is created)
        internal SplitEnumerator(char[] Input, char Delimiter)
        {
            // Save references
            input = Input;
            delimiter = Delimiter;

            // Remember the length of the character array
            length = input.Length;

            // Structure holding split rows
            record = new SplitRow();

            // Starting at the first character
            start = 0;

        }

        // Enumerator implementation
        #region IEnumerator Methods

        // 2. SQL Server calls the MoveNext() method on the enumeration object
        bool IEnumerator.MoveNext()
        {
            // No more rows?
            if (start > length) { return false; }

            // Find the next delimiter
            for (int i = start; i < length; i++)
            {
                if (input[i] == delimiter)
                {
                    // Increment the sequence number
                    record.Sequence++;
                    // Save the split element
                    record.Item = new string(input, start, i - start);
                    // Set the next element search start point
                    start = i + 1;
                    return true;
                }
            }

            // Last item
            record.Sequence++;
            record.Item = new string(input, start, length - start);
            start = length + 1;
            return true;

        }

        // 3. SQL Server calls the Current() method to get an object for the current row
        // (We pack the current row data in an OutputRecord structure)
        object IEnumerator.Current
        {
            get { return record; }
        }

        // Required by the IEnumerator interface, but not needed for this implementation
        void IEnumerator.Reset()
        {
            throw new System.NotImplementedException();
        }

        #endregion

        readonly char[] input;      // Reference to the string to be split
        readonly int length;        // Length of the input string
        readonly char delimiter;    // The delimiter character

        int start;                  // Current search start position
        SplitRow record;            // Each row to be returned
    }

    // 4. SQL Server calls the FillRow method to obtain column values for the current row
    public static void FillRow(object obj, out int sequence, out string item)
    {
        // The passed-in object is an OutputRecord
        var r = (SplitRow)obj;

        // Set the output parameter values
        sequence = r.Sequence;
        item = r.Item;
    }

    // Structure used to hold each row
    struct SplitRow
    {
        internal int Sequence { get; set; }     // Sequence of the element
        internal string Item { get; set; }      // The element
    }
};

*/